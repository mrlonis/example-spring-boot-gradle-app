plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.7'
	id 'io.spring.dependency-management' version '1.1.5'
	id("com.diffplug.spotless") version "6.25.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.apache.camel.springboot:camel-spring-boot-starter:4.6.0'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.session:spring-session-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('installLocalGitHook', Copy) {
	from new File(rootProject.rootDir, '.hooks/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	fileMode 0775
}

build.dependsOn installLocalGitHook

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore', 'prettierc'
		trimTrailingWhitespace()
		endWithNewline()
	}
	format 'styling', {
		target '.vscode/**/*.json', 'src/**/*.json', 'src/**/*.yaml', 'src/**/*.yml', 'compose.yml', '.mvn/**/*.xml',
				'src/**/*.xml'
		prettier(['prettier': '3.3.2', '@prettier/plugin-xml': '0.10.0'])
		.config(['printWidth': 120, 'plugins': ['@prettier/plugin-xml']]).npmInstallCache()
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		importOrder()
		removeUnusedImports()
		cleanthat().version('2.20').sourceCompatibility('21').addMutator('SafeAndConsensual').addMutator(
				'SafeButNotConsensual')
		palantirJavaFormat('2.47.0').style("PALANTIR").formatJavadoc(true)
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
	}
	groovyGradle {
		greclipse()
		trimTrailingWhitespace()
		endWithNewline()
	}
	flexmark {
		target '**/*.md'
		flexmark()
		trimTrailingWhitespace()
		endWithNewline()
	}
	shell {
		target 'scripts/**/*.sh'
		shfmt()
		trimTrailingWhitespace()
		endWithNewline()
	}
}
